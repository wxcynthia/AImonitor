# PTSD Trigger Detection System for Meta Glasses

This system helps PTSD patients by monitoring video streams from Meta glasses, detecting potential triggers (specifically car-related objects), and automatically recording brain wave data when triggers are detected.

## Overview

The system consists of several components:

1. **Video Analysis Module**: Processes video from Meta glasses to detect cars and other vehicles using Google Cloud Video Intelligence API.
2. **Transcription Analysis**: Analyzes speech in the video to detect car-related keywords.
3. **Cursor Integration**: Interfaces with the brain wave recording device at `/Users/wenxin/Desktop/AI/sensor`.
4. **Streaming Support**: Allows processing of live video streams from Meta glasses using RTSP protocol.

## Requirements

- Python 3.7+
- Google Cloud account with Video Intelligence API enabled
- Service account key with permissions for Video Intelligence API
- Meta glasses with video streaming capability
- Brain wave recording device at the specified path
- GStreamer (for streaming version)
- AIStreamer (for streaming version)

## Installation

1. Clone this repository:
   ```
   git clone https://github.com/yourusername/ptsd-detector.git
   cd ptsd-detector
   ```

2. Install the required Python packages:
   ```
   pip install google-cloud-videointelligence google-cloud-storage pyserial
   ```

3. Set up your Google Cloud credentials:
   ```
   export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your-service-account-key.json"
   ```

4. For streaming support, install GStreamer and build AIStreamer:
   ```
   # Install GStreamer (Ubuntu/Debian)
   sudo apt-get install gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-tools

   # Clone and build AIStreamer
   git clone https://github.com/google/aistreamer.git
   cd aistreamer
   bash build.sh
   ```

## Usage

### Batch Processing Mode

Use this mode to analyze a pre-recorded video file:

```
python main_script.py --video /path/to/video.mp4 --cursor-path /Users/wenxin/Desktop/AI/sensor --output-dir /path/to/output --gcs-bucket my-gcs-bucket
```

Options:
- `--video`: Path to video file or GCS URI (required)
- `--cursor-path`: Path to the brain wave recording device (default: /Users/wenxin/Desktop/AI/sensor)
- `--output-dir`: Directory to save all output files
- `--gcs-bucket`: GCS bucket for uploading/processing video
- `--triggers`: Comma-separated list of trigger objects to detect (default: car,vehicle,truck,automobile,traffic)
- `--confidence`: Minimum confidence threshold for triggers (default: 0.7)
- `--duration`: Duration in seconds for each brain wave recording (default: 5)

### Streaming Mode

Use this mode to process live video from Meta glasses:

```
python streaming_version.py --rtsp-url rtsp://meta-glasses-ip:port/stream --cursor-path /Users/wenxin/Desktop/AI/sensor --output-dir /path/to/output
```

Options:
- `--rtsp-url`: RTSP URL of the Meta glasses stream (required)
- `--cursor-path`: Path to the brain wave recording device (default: /Users/wenxin/Desktop/AI/sensor)
- `--output-dir`: Directory to save all output files
- `--pipe-name`: Name of the named pipe for AIStreamer (default: meta_glasses_pipe)
- `--triggers`: Comma-separated list of trigger objects to detect (default: car,vehicle,truck,automobile,traffic)
- `--confidence`: Minimum confidence threshold for triggers (default: 0.7)
- `--duration`: Duration in seconds for each brain wave recording (default: 5)

## Output

The system creates a session directory for each run, containing:

- `recordings/`: Brain wave recordings triggered by car detections
- `analysis/`: Analysis results and logs

Each recording includes:
- Brain wave data file
- JSON metadata with trigger information

## Customization

You can customize the trigger objects by modifying the `--triggers` parameter. The default is set to detect cars and related vehicles, but you can adjust it for other PTSD triggers.

## Troubleshooting

- **"Cursor device not found"**: Ensure the brain wave recording device is connected and the path is correct.
- **"Failed to initialize components"**: Check your Google Cloud credentials and permissions.
- **Streaming issues**: Verify your Meta glasses are properly streaming via RTSP and the URL is correct.
- **"AIStreamer process terminated unexpectedly"**: Check the AIStreamer build and configuration.

## License

This project is licensed under the MIT License - see the LICENSE file for details.